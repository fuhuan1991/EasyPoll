{"version":3,"sources":["QuestionForm.jsx","client.js","Main.jsx","index.js"],"names":["QuestionForm","props","onNameChange","e","value","target","setState","questionName","onAddOption","options","state","name","onTypeChange","type","onOptionChange","index","temp","onOptionDeletion","splice","onConfirm","o","checkState","hasName","trim","hasOptions","emptyOptions","option","editIndex","question","questions","map","key","className","DeleteOutlined","onClick","bind","onChange","placeholder","this","randerOptions","okToSumbit","Group","onCancel","disabled","React","Component","checkStatus","response","ok","error","Error","statusText","json","then","Promise","reject","Main","openEditMod","QuestionId","editMod","currentEditId","closeEditMod","onQuestionConfirm","data","onQuestionDeletion","renderQuestions","i","EditOutlined","onTitleChange","title","check","length","onCreate","fetch","headers","method","body","JSON","stringify","res","console","log","Fragment","PlusCircleOutlined","CarryOutOutlined","visible","footer","maskClosable","destroyOnClose","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d279822f.chunk.js","sourcesContent":["import React from 'react';\nimport { Input, Button, Radio } from 'antd';\nimport {\n    DeleteOutlined,\n} from '@ant-design/icons';\n\n\nclass QuestionForm extends React.Component {\n    constructor(props) {\n        super(props);\n        if (props.editIndex >= 0) {\n            const question = props.questions[props.editIndex];\n            this.state = {\n                questionName: question.questionName,\n                type: question.type,\n                options: [...question.options],\n            };\n        } else {\n            this.state = {\n                questionName: '',\n                type: 'single',\n                options:[],\n            };\n        }\n    }\n\n    onNameChange = (e) => {\n        const { value } = e.target;\n        this.setState({\n            questionName: value,\n        });\n    }\n\n    onAddOption = () => {\n        const option = {\n            name: '',\n        };\n        this.setState({\n            options: [...this.state.options, option],\n        })\n    }\n\n    componentDidMount(){}\n\n    onTypeChange = (e) => {\n        this.setState({\n            type: e.target.value,\n          });\n    }\n\n    onOptionChange = (index, e) => {\n  \n        const { value } = e.target;\n        const temp = [...this.state.options];\n        temp[index].name = value;\n\n        this.setState({\n            options: temp,\n        });\n    }\n\n    onOptionDeletion = (index) => {\n        const temp = [...this.state.options];\n        temp.splice(index, 1);\n        this.setState({\n            options: temp,\n        });\n    }\n\n    onConfirm = () => {\n        const o = {\n            questionName: this.state.questionName,\n            options: this.state.options,\n            type: this.state.type,\n        };\n        this.props.onConfirm(o);\n    }\n\n    checkState = () => {\n        const hasName = !!this.state.questionName.trim();\n        let hasOptions = false;\n        let emptyOptions = false;\n        for (const option of this.state.options) {\n            hasOptions = true;\n            if (option.name.trim() === '') emptyOptions = true;\n        }\n        return hasName && hasOptions && !emptyOptions;\n    }\n\n    randerOptions(options) {\n        return options.map((option, index) => \n            <div key={index} className='section'>\n                <span>Option {index+1}</span>\n                <DeleteOutlined onClick={this.onOptionDeletion.bind(this, index)}/>\n                <Input onChange={this.onOptionChange.bind(this, index)} value={option.name} placeholder='Optioin' />\n            </div>\n        );\n    }\n\n    render() {\n\n        const options = this.randerOptions(this.state.options);\n        const okToSumbit = this.checkState();\n\n        return (\n            <div className='question_form'>\n                <span>Question Name:</span>\n                <Input onChange={this.onNameChange} value={this.state.questionName} placeholder='Question Name' />\n                <div className='section'>\n                    <Radio.Group onChange={this.onTypeChange} value={this.state.type}>\n                        <Radio value={'multiple'}>Multiple Choice</Radio>\n                        <Radio value={'single'}>Single Choice</Radio>\n                    </Radio.Group>\n                </div>\n                {options}\n                <Button onClick={this.onAddOption} type='primary'>Add a New Option</Button>\n                <div className='footer'>\n                    <Button onClick={this.props.onCancel}>Cancel</Button>\n                    <Button onClick={this.onConfirm} type='primary' disabled={!okToSumbit}>Confirm</Button>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default QuestionForm;","import fetch from 'unfetch';\n\n// check the status of all sort of response\nconst checkStatus = response => {\n    if (response.ok) {\n      return response;\n    } else {\n        let error = new Error(response.statusText);\n        error.response = response;\n        response.json().then(e => {\n          error.error = e;\n        });\n        return Promise.reject(error);\n      }\n  }\n\n// create a new Poll\nexport const createPoll = data => fetch('api/create', {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: JSON.stringify(data),\n}).then(checkStatus);\n\n","import React from 'react';\nimport { Input, Button, Modal } from 'antd';\nimport QuestionForm from './QuestionForm';\nimport {\n    DeleteOutlined,\n    EditOutlined,\n    PlusCircleOutlined,\n    CarryOutOutlined,\n} from '@ant-design/icons';\nimport { createPoll } from './client';\n\nclass Main extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: '',\n            editMod: false,\n            currentEditId: -1,\n            questions: [],\n        };\n    }\n\n    componentDidMount(){}\n\n    openEditMod = (QuestionId) => {\n\n        this.setState({\n            editMod: true,\n            currentEditId: QuestionId,\n        });\n    };\n\n    closeEditMod = () => {\n        this.setState({\n            editMod: false,\n        });\n    }\n\n    onQuestionConfirm = (data) => {\n        if (this.state.currentEditId >=0 ) {\n            // edit mod\n            const temp = this.state.questions;\n            temp[this.state.currentEditId] = data;\n            this.setState({\n                questions: temp,\n                currentEditId: -1,\n            });\n        } else {\n            // create mod\n            const temp = [...this.state.questions, data];\n            this.setState({\n                questions: temp,\n            });\n        }\n        this.closeEditMod();\n    }\n\n    onQuestionDeletion = (index) => {\n        const temp = [...this.state.questions];\n        temp.splice(index, 1);\n        this.setState({\n            questions: temp,\n        });\n    }\n\n    renderQuestions = (questions) => {\n        return questions.map((question, index) => {\n\n        const options = question.options.map((option, i) => <div className='option' key={option.name}>option {i+1}:{option.name}</div>);\n\n            return (\n                <div key={question.questionName}>\n                    <div className='question_title'>\n                        Question {index+1}: \n                        <span className='blue'>({question.type==='multiple'? 'Multiple choice' : 'Single choice'})</span> \n                        {question.questionName}\n                        <DeleteOutlined onClick={this.onQuestionDeletion.bind(this, index)} />\n                        <EditOutlined onClick={this.openEditMod.bind(this, index)} />\n                    </div>\n                    \n                    <div>{options}</div>\n                </div>\n            );\n        });\n    }\n\n    onTitleChange = (e) => {\n        const { value } = e.target;\n        this.setState({\n            title: value,\n        });\n    }\n\n    check = () => {\n        return !!this.state.title.trim() && this.state.questions.length > 0\n    }\n\n    onCreate = () => {\n        const o = {\n            title: this.state.title.trim(),\n            questions: this.state.questions,\n        };\n        createPoll(o).then(\n            (res) => {\n                console.log(res)\n            }, \n            (e) => {\n                console.log(e);\n            });\n    }\n\n    render() {\n\n        const questions = this.renderQuestions(this.state.questions);\n        \n        return (\n            <React.Fragment>\n                <div className=\"main\">\n                    <h1>Start a New Poll</h1>\n                    <span>Title:</span>\n                    <Input value={this.state.title} onChange={this.onTitleChange} placeholder=\"Title\" />\n                    <div className='questions'>{questions}</div>\n                    <Button type=\"primary\" onClick={this.openEditMod.bind(this, -1)}><PlusCircleOutlined />Add a new question</Button>\n                    &nbsp;&nbsp;&nbsp;&nbsp;\n                    <Button type=\"primary\" \n                        disabled={!this.check()} \n                        onClick={this.onCreate}\n                    >\n                        <CarryOutOutlined />Create it!\n                    </Button>\n                </div>\n                <Modal\n                    title=\"New Question\"\n                    visible={this.state.editMod}\n                    footer={null}\n                    onCancel={this.closeEditMod}\n                    maskClosable={false}\n                    destroyOnClose={true}\n                >\n                    <QuestionForm \n                        onCancel={this.closeEditMod} \n                        onConfirm={this.onQuestionConfirm} \n                        questions={this.state.questions}\n                        editIndex={this.state.currentEditId}\n                    />\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Main from './Main';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}